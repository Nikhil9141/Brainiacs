<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Technical Interview Platform</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">
    <style>
        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }

        body {
            font-family: 'Arial', sans-serif;
            background-color: #1a1a2e;
            color: #ffffff;
            line-height: 1.6;
        }

        .container {
            width: 95%;
            max-width: 1200px;
            margin: 20px auto;
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
        }

        .problem-section {
            background-color: #16213e;
            border-radius: 10px;
            padding: 20px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }

        .editor-section {
            background-color: #0f3460;
            border-radius: 10px;
            padding: 20px;
        }

        .problem-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
        }

        .problem-title {
            font-size: 1.5rem;
            color: #e94560;
        }

        .difficulty-tag {
            padding: 5px 10px;
            border-radius: 5px;
            font-weight: bold;
        }

        .difficulty-easy {
            background-color: #4caf50;
            color: white;
        }

        .difficulty-medium {
            background-color: #ff9800;
            color: white;
        }

        .difficulty-hard {
            background-color: #f44336;
            color: white;
        }

        #code-editor {
            width: 100%;
            height: 400px;
            background-color: #222;
            color: #e0e0e0;
            font-family: 'Courier New', monospace;
            font-size: 14px;
            border: 1px solid #444;
            border-radius: 5px;
            padding: 10px;
            resize: none;
        }

        .controls {
            display: flex;
            justify-content: space-between;
            margin-top: 15px;
            gap: 10px;
        }

        .language-select {
            background-color: #16213e;
            color: white;
            border: 1px solid #444;
            padding: 10px;
            border-radius: 5px;
            flex-grow: 1;
        }

        .action-buttons {
            display: flex;
            gap: 10px;
        }

        .run-button,
        .next-button {
            background-color: #e94560;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 5px;
            cursor: pointer;
            transition: background-color 0.3s;
        }

        .next-button {
            background-color: #4caf50;
            display: none;
        }

        .run-button:hover,
        .next-button:hover {
            opacity: 0.9;
        }

        .test-case-container {
            margin-top: 20px;
        }

        .test-case {
            background-color: #16213e;
            margin-bottom: 10px;
            padding: 10px;
            border-radius: 5px;
        }

        .test-case-result {
            display: flex;
            align-items: center;
        }

        .test-case-result i {
            margin-right: 10px;
        }

        .passed {
            color: #4caf50;
        }

        .failed {
            color: #f44336;
        }

        #output {
            background-color: #222;
            color: #e0e0e0;
            padding: 10px;
            border-radius: 5px;
            white-space: pre-wrap;
            font-family: 'Courier New', monospace;
        }

        #result-container {
            text-align: center;
            margin-top: 20px;
            font-size: 1.2rem;
        }

        .next-level-button {
            background-color: #4CAF50;
            color: white;
            border: none;
            padding: 10px 20px;
            font-size: 16px;
            font-weight: bold;
            border-radius: 5px;
            cursor: pointer;
            transition: background-color 0.3s;
            margin-top: 20px;
        }

        .next-level-button:hover {
            background-color: #45a049;
        }

        @media (max-width: 768px) {
            .container {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>

<body>
    <div class="container">
        <div class="problem-section">
            <div class="problem-header">
                <h2 class="problem-title" id="problem-title">String Reversal</h2>
                <span class="difficulty-tag difficulty-easy" id="difficulty-tag">Easy</span>
            </div>
            <div class="problem-description">
                <p id="problem-description">Write a function to reverse a given string input.</p>
            </div>
            <div class="test-case-container" id="test-cases">
                <!-- Test cases will be dynamically added here -->
            </div>
        </div>

        <div class="editor-section">
            <textarea id="code-editor" placeholder="Write your solution here..."></textarea>
            <div class="controls">
                <select id="language-select" class="language-select">
                    <option value="python">Python</option>
                    <option value="javascript">JavaScript</option>
                    <option value="java">Java</option>
                    <option value="cpp">C++</option>
                    <option value="c">C</option>
                </select>
                <div class="action-buttons">
                    <button id="run-code" class="run-button">Run Code</button>
                    <button id="next-question" class="next-button">Next Problem</button>
                </div>
            </div>
            <div id="output-container" style="margin-top: 20px;">
                <h3>Output:</h3>
                <pre id="output"></pre>
            </div>
        </div>
    </div>

    <script>
        const questions = [
        {
    title: "Two Sum",
    description: "Find two numbers in an array that add up to a target sum.",
    difficulty: "easy",
    testCases: [
        { input: "[2, 7, 11, 15], target=9", expectedOutput: "[0, 1]" },
        { input: "[3, 2, 4], target=6", expectedOutput: "[1, 2]" },
        { input: "[3, 3], target=6", expectedOutput: "[0, 1]" }
    ]
},
{
    title: "Longest Substring Without Repeating Characters",
    description: "Find the length of the longest substring without repeating characters.",
    difficulty: "medium",
    testCases: [
        { input: "\"abcabcbb\"", expectedOutput: "3" },
        { input: "\"bbbbb\"", expectedOutput: "1" },
        { input: "\"pwwkew\"", expectedOutput: "3" }
    ]
},
{
    title: "Median of Two Sorted Arrays",
    description: "Find the median of two sorted arrays.",
    difficulty: "hard",
    testCases: [
        { input: "[1, 3], [2]", expectedOutput: "2.0" },
        { input: "[1, 2], [3, 4]", expectedOutput: "2.5" },
        { input: "[0, 0], [0, 0]", expectedOutput: "0.0" }
    ]
},
{
    title: "Rotate Image",
    description: "Rotate a 2D matrix 90 degrees clockwise in place.",
    difficulty: "medium",
    testCases: [
        { input: "[[1, 2, 3], [4, 5, 6], [7, 8, 9]]", expectedOutput: "[[7, 4, 1], [8, 5, 2], [9, 6, 3]]" },
        { input: "[[1]]", expectedOutput: "[[1]]" },
        { input: "[[1, 2], [3, 4]]", expectedOutput: "[[3, 1], [4, 2]]" }
    ]
},

{
    title: "Trapping Rain Water",
    description: "Calculate how much water can be trapped after raining, given an elevation map.",
    difficulty: "hard",
    testCases: [
        { input: "[0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1]", expectedOutput: "6" },
        { input: "[4, 2, 0, 3, 2, 5]", expectedOutput: "9" },
        { input: "[0, 0, 0]", expectedOutput: "0" }
    ]
}


];

        let currentQuestionIndex = 0;
        let score = 0;

        function loadQuestion(index) {
            if (index >= questions.length) {
                showFinalResults();
                return;
            }

            const question = questions[index];
            document.getElementById('problem-title').textContent = question.title;
            document.getElementById('problem-description').textContent = question.description;
            document.getElementById('difficulty-tag').textContent = question.difficulty.charAt(0).toUpperCase() + question.difficulty.slice(1);
            document.getElementById('difficulty-tag').className = `difficulty-tag difficulty-${question.difficulty}`;

            // Reset UI elements
            document.getElementById('code-editor').value = '';
            document.getElementById('output').textContent = '';
            document.getElementById('next-question').style.display = 'none';

            const testCasesContainer = document.getElementById('test-cases');
            testCasesContainer.innerHTML = '';
            question.testCases.forEach((testCase, idx) => {
                const testCaseElement = document.createElement('div');
                testCaseElement.className = 'test-case';
                testCaseElement.innerHTML = `
                    <div class="test-case-result" id="test-case-${idx}">
                        <i class="fas fa-circle"></i>
                        Test Case ${idx + 1}: Input = ${testCase.input}
                    </div>
                `;
                testCasesContainer.appendChild(testCaseElement);
            });
        }

        async function runCode() {
            const code = document.getElementById('code-editor').value;
            const language = document.getElementById('language-select').value;
            const currentQuestion = questions[currentQuestionIndex];

            const outputElement = document.getElementById('output');
            outputElement.textContent = '';

            let allTestsPassed = true;

            for (let i = 0; i < currentQuestion.testCases.length; i++) {
                const testCase = currentQuestion.testCases[i];
                const testCaseElement = document.getElementById(`test-case-${i}`);
                const icon = testCaseElement.querySelector('i');

                try {
                    const response = await fetch("https://emkc.org/api/v2/piston/execute", {
                        method: "POST",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify({
                            language: language,
                            version: "*",
                            files: [{ name: "main", content: code }],
                            stdin: testCase.input
                        })
                    });

                    const result = await response.json();

                    if (result.run && result.run.stdout) {
                        const output = result.run.stdout.trim();
                        if (output === testCase.expectedOutput) {
                            icon.className = 'fas fa-check-circle passed';
                        } else {
                            icon.className = 'fas fa-times-circle failed';
                            allTestsPassed = false;
                            outputElement.textContent += `Test Case ${i + 1} Failed: Expected ${testCase.expectedOutput}, Got ${output}\n`;
                        }
                    } else {
                        icon.className = 'fas fa-times-circle failed';
                        allTestsPassed = false;
                        outputElement.textContent += `Test Case ${i + 1} Failed: No output\n`;
                    }
                } catch (error) {
                    console.error(error);
                    allTestsPassed = false;
                    outputElement.textContent += `Test Case ${i + 1} Failed: Error in execution\n`;
                }
            }

            if (allTestsPassed) {
                score++;
                outputElement.textContent = 'Congratulations! All test cases passed.';
                document.getElementById('next-question').style.display = 'block';
            }
        }

        function showFinalResults() {
            document.querySelector('.problem-section').innerHTML = `
                <div id="result-container">
                    <h2>Interview Complete!</h2>
                    <p>Your Score: ${score} out of ${questions.length}</p>
                    <button class="next-level-button" onclick="window.location.href='/amazon2.html'">Next Level</button>


                </div>
            `;
            document.querySelector('.editor-section').style.display = 'none';
        }

        document.getElementById('run-code').addEventListener('click', runCode);

        document.getElementById('next-question').addEventListener('click', () => {
            currentQuestionIndex++;
            loadQuestion(currentQuestionIndex);
        });

        // Initialize first question
        loadQuestion(currentQuestionIndex);
    </script>
</body>

</html>